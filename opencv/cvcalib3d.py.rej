diff a/opencv/cvcalib3d.py b/opencv/cvcalib3d.py	(rejected hunks)
@@ -17,6 +17,83 @@ import test
 # default test data
 DT = test.Default()
 
+# calibrateCamera
+objectPoints = package.Argument(
+    "objectPoints", "Object points", cvtype.VectorOfMat(),
+    datatype.List(datatype.Float32Matrix())
+)
+imagePoints = package.Argument(
+    "imagePoints", "Image points", cvtype.VectorOfMat(),
+    datatype.List(datatype.Float32Matrix())
+)
+imageSizeX = package.NumericParameter(
+    "imageSizeX", "Sensor size X", cvtype.Int(), datatype.UInt32(), default = 640,
+    minValue = 1
+)
+imageSizeY = package.NumericParameter(
+    "imageSizeY", "Sensor size Y", cvtype.Int(), datatype.UInt32(), default = 480,
+    minValue = 1
+)
+imageSize = package.Size(imageSizeX, imageSizeY)
+cameraMatrix = package.MatrixArgument(
+    "cameraMatrix", "Camera matrix", cvtype.Mat(), datatype.Float64Matrix(),
+    rows = 3, cols = 3
+)
+distCoeffs = package.MatrixArgument(
+    "distCoeffs", "Distortion coefficients", cvtype.Mat(), 
+    datatype.Float64Matrix(), rows = 1, cols = 5
+)
+allocateRVecs = document.Document(
+"""
+std::vector<cv::Mat> rvecs(objectPointsCastedData->content().size());
+std::fill(rvecs.begin(), rvecs.end(), cv::Mat());
+"""
+)
+allocateTVecs = document.Document(
+"""
+std::vector<cv::Mat> tvecs(objectPointsCastedData->content().size());
+std::fill(tvecs.begin(), tvecs.end(), cv::Mat());
+"""
+)
+rvecs = package.Constant("rvecs", initIn = allocateRVecs);
+tvecs = package.Constant("tvecs", initIn = allocateTVecs);
+listSizeCheck = document.Document(
+"""
+if (objectPointsCastedData->content().size() != imagePointsCastedData->content().size())
+{
+    throw runtime::InputError(OBJECT_POINTS, *this, "Object and image point lists must have the same size.");
+}
+""")
+
+chess_corners_files = (
+  test.MatrixFile("chess_corners_1.npy"), # 32-bit float 35x2
+  test.MatrixFile("chess_corners_2.npy"),
+  test.MatrixFile("chess_corners_3.npy"),
+  test.MatrixFile("chess_corners_4.npy"),
+  test.MatrixFile("chess_corners_5.npy"),
+  test.MatrixFile("chess_corners_6.npy"),
+  test.MatrixFile("chess_corners_7.npy")
+)
+chess_corners_3d_files = (
+  test.MatrixFile("chess_corners_3d.npy"), # 32-bit float 35x3
+) * 7
+chess_corners = test.List(*chess_corners_files)
+chess_corners_3d = test.List(*chess_corners_3d_files)
+
+allocate = package.Option(
+    "allocate", "Allocate",
+    [package.Input(objectPoints), package.Input(imagePoints), imageSize,
+     package.Allocation(cameraMatrix), package.Allocation(distCoeffs), rvecs,
+     tvecs],
+    inputCheck = listSizeCheck,
+    tests = [
+        [chess_corners_3d, chess_corners, (320, 240), DT, DT, DT, DT]
+    ]
+)
+calibrateCamera = package.Method(
+    "calibrateCamera", options = [allocate]
+)
+
 # findChessboardCorners
 image = package.Argument(
     "image", "Image", cvtype.Mat(), datatype.Any8BitImage()
