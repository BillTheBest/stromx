/** \page camera Camera

This example is concerned with the detection of edges in images received from a simulated camera input. The layout of the stream is as below.

\image html example/camera/camera.png

The \em Canny edge detector receives image data from two operators. The first one is the camera which constantly sends images to the edge detector. The second operator \em BufferArray owns a predefined number of empty image buffers, i.e. pre-allocated, empty images. If \em BufferArray hands out one of its images to the next operator the image is removed from the array and the \em BufferArray loses ownership of the image. However, as soon as no other object references the data container which contains the image, the image data is \em recycled, i.e. it is given back to the \em BufferArray operator.

In this example the \em Canny operator computes the edge map of the camera image and writes it to the image buffer it receives from \em BufferArray. This buffer is then sent to the output of the edge detector operator. In other words, the \em Canny operator does not own any allocate any image memory during processing but uses only these images it receives as input data. If the party which obtains the output from \em Canny releases this data soon enough it can be recycled and used again to store the result of the next camera image. The output image of the camera is handled the same way, i.e. as soon as the edge detector finishes processing the camera image is recycled for the acquisition of further images. As a consequence the presented stream can be operated without allocating or deallocating image data.

\note
The camera has an additional output which contains the index of the current image acquired. If the camera runs out of available image buffers, i.e. if all image buffers are referenced by other objects, the camera can not acquire further images. However, the index is still incremented for each image which should have been acquired. Tracking and comparing the index values allows to find out which frames were lost.

The illustrated stream is configured by the XML file below. The parameter settings of the operators a commented in the file.

\code
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE Stromx SYSTEM "stromx.dtd">

<Stromx version="0.1.0">
    <Stream>
        <Operator id="0" package="Base" type="Camera" version="0.1.0">
            <!-- output image index -->
            <Parameter id="0">
                <Data package="Runtime" type="Bool" version="0.1.0">1</Data>
            </Parameter>
            <!-- image for camera simulator -->
            <Parameter id="0">
                <Data type="Image" package="Base" version="0.1.0">lenna.jpg</Data>
            </Parameter>
            <!-- software trigger mode -->
            <Parameter id="1">
                <Data type="Enum" package="Runtime" version="0.1.0">1</Data>
            </Parameter>
            <!-- the buffer size is 1 MB -->
            <Parameter id="5">
                <Data type="UInt32" package="Runtime" version="0.1.0">1000000</Data>
            </Parameter>
            <!-- one buffer -->
            <Parameter id="6">
                <Data type="UInt32" package="Runtime" version="0.1.0">1</Data>
            </Parameter>
            <!-- 8-bit grayscale output -->
            <Parameter id="14">
                <Data type="Enum" package="Runtime" version="0.1.0">1</Data>
            </Parameter>
        </Operator>
        <Operator id="1" package="Base" type="Buffer" version="0.1.0">
            <!-- one buffer -->
            <Parameter id="0">
                <Data type="UInt32" package="Runtime" version="0.1.0">1</Data>
            </Parameter>
            <!-- the buffer size is 1 MB -->
            <Parameter id="1">
                <Data type="UInt32" package="Runtime" version="0.1.0">1000000</Data>
            </Parameter>
        </Operator>
        <Operator id="2" package="Base" type="Canny" version="0.1.0">
            <!-- threshold 1 -->
            <Parameter id="0">
                <Data type="Double" package="Runtime" version="0.1.0">50</Data>
            </Parameter>
            <!-- threshold 2 -->
            <Parameter id="1">
                <Data type="Double" package="Runtime" version="0.1.0">150</Data>
            </Parameter>
            <Input id="0" operator="0" output="0"/>
            <Input id="1" operator="1" output="0"/>
        </Operator>
        <Thread>
            <InputConnector operator="2" input="0"/>
            <InputConnector operator="2" input="1"/>
        </Thread> 
    </Stream>
</Stromx>
\endcode

The program which operates the stream is straightforward. As in the previous examples the program starts by importing all required headers and by registering the \em runtime and \em base libraries.

\code
#include <stromx/runtime/Factory.h>
#include <stromx/runtime/XmlReader.h>
#include <stromx/runtime/Stream.h>
#include <stromx/runtime/Runtime.h>
#include <stromx/runtime/Operator.h>
#include <stromx/runtime/ReadAccess.h>
#include <stromx/runtime/Image.h>

#include <stromx/base/Base.h>
#include <stromx/base/Camera.h>

#include <iostream>

using namespace stromx;

int main (int, char**)
{
    runtime::Factory factory;
    
    stromxRegisterRuntime(factory);
    stromxRegisterBase(factory);
\endcode

Next the stream is read from the XML file and started.
 
\code   
    runtime::Stream* stream = runtime::XmlReader().readStream("camera.xml", factory);
    
    stream->start();
    
    runtime::Operator* camera = stream->operators()[0];
    runtime::Operator* canny = stream->operators()[2];
    
    for(unsigned int i = 0; i < 5; ++i)
    {
        runtime::DataContainer data = canny->getOutputData(0);
        runtime::ReadAccess<runtime::Image> image(data);
        std::cout << "Received image " <<  image().height() << "x" << image().width() << std::endl;
        
        canny->clearOutputData(0);
        camera->clearOutputData(1);
    }
\endcode

Before starting the iteration explicit references to the \em Camera and \em Canny operators are acquired. In each step the output image of the edge detector is obtained and its dimension are written to the command line. After that the output of the edge detector and the index output of the camera are cleared. It is important to clear \em all outputs which are not connected to other operators. Not doing so would eventually stop stream because no further data can be send to the outputs.
\code 
    stream->stop();
    stream->join();
    
    delete stream;
}
\endcode

Finally, the stream is stopped and deleted. 

\note 
The class runtime::Image does not support saving of images to file because runtime is not linked to any 3rd party image processing library. However, base::Image can write image files using OpenCV. Thus, the images in the code above can be written by constructing base::Image objects from the more general runtime::Image data:

\code 
#include <base/Image.h>
...
{
    ...
    for(unsigned int i = 0; i < 5; ++i)
    {
        ...
        base::Image baseImage(image())
        baseImage.save("image.png");
        ...
    }
    ...
}
\endcode
*/




