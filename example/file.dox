/** \page file File

In this tutorial the very same stream as in \ref simple is constructed. However, this time it is deserialized from an XML file instead of manually assembled by strom library functions. The XML file which encodes this stream looks as follows:

\code
<?xml version="1.0" encoding="UTF-8" ?>

<Stream>
    <Operator id="0" package="Base" type="Counter" version="0.1"/>
    <Operator id="1" package="Base" type="PeriodicDelay" version="0.1">
        <Parameter id="0">
            <Data type="UInt32" package="Strom" version="0.1">1000</Data>
        </Parameter>
        <Input id="0" operator="0" output="0"/>
    </Operator>
    <Thread>
        <InputNode operator="1" input="0"/>
    </Thread> 
</Stream>
\endcode

Each operator and each data type is identified by the a combination of \em package and \em name. This allows the use of operator and data types which are defined in third party packages not known to the strom core library. The code which reads this XML file is explained in the following.

\code
#include <strom/Factory.h>
#include <strom/XmlReader.h>
#include <strom/Stream.h>
#include <strom/Strom.h>
#include <strom/Operator.h>
#include <strom/Primitive.h>
#include <strom/ReadAccess.h>

#include <base/Base.h>

#include <iostream>
\endcode

Again the programs starts by importing all required header files. In addition to headers which were also included in the last tutorial two more files from the core library are required. On the other hand it is important to note that the inclusion of the operator headers in the base library is not required anymore. The file base/Base.h is the only header which is needed from this library.

\code
int main (int argc, char* argv[])
{
    strom::Factory factory;  
 
    registerStrom(factory);
    registerBase(factory);
\endcode

As a first step a factory 

\code
    strom::Stream* stream = strom::XmlReader(factory).read("file.xml");
    
    stream->start();
    
    strom::Operator* timer = stream->operators()[1];
    
    for(unsigned int i = 0; i < 5; ++i)
    {
        strom::DataContainer data = timer->getOutputData(0);
        strom::ReadAccess<strom::UInt32> count(data);
        std::cout << "Received " <<  (unsigned int)(count()) << std::endl;
        
        timer->clearOutputData(0);
    }
    
    stream->stop();
    stream->join();
    
    delete stream;
}
\endcode

Now you can proceed to \ref operator.
*/
